{"version":3,"sources":["scenes/auth/login/index.tsx","scenes/auth/login/useLogin.tsx","common/network.ts","constants/api_constants.js","constants/error.js"],"names":["Login","Form","useForm","form","login","history","useHistory","setProfile","useContext","UserContext","username","password","a","hide","message","loading","variables","parameter","language","loginCode","loginPassword","token","authApi","APIConstants","result","loginRes","error","setLocalToken","data","setUserInfo","JSON","stringify","push","console","log","loginFailed","useLogin","className","name","onFinish","initialValues","residence","prefix","scrollToFirstError","size","style","position","display","justifyContent","title","Item","rules","required","placeholder","hasFeedback","Password","type","htmlType","width","fontSize","padding","borderRadius","getLocalToken","Request","url","params","method","needEncodeUrl","headers","Accept","Authorization","opts","mode","toLowerCase","body","keys","Object","length","query","map","key","encodeURIComponent","join","didTimeOut","Promise","resolve","reject","timeout","setTimeout","Error","fetch","then","response","clearTimeout","status","contentType","get","indexOf","json","res","resetLocalToken","window","location","statusText","code","desc","catch","err","Headers","accept","host","process","getOrders","getStatusCount","exportOrders"],"mappings":"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","file":"static/js/8.2a5ee817.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete,\n} from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport \"./login.css\";\nimport Label from \"components/general/label\";\nimport { LangIcon } from \"components/AppFrame/narbar/narbar_icon\";\nimport { LockIcon, UserLoginIcon } from \"components/general/icon\";\nimport useLogin from \"./useLogin\";\n\nexport default function Login() {\n  const [form] = Form.useForm();\n  const { login } = useLogin();\n  const onFinish = ({\n    username,\n    password,\n  }: {\n    username: string;\n    password: string;\n  }) => {\n    console.log(\"Received values of form username: \", username);\n    console.log(\"Received values of form password: \", password);\n    login(username, password);\n  };\n  return (\n    <div className=\"container\">\n      <Form\n        className=\"login_form\"\n        form={form}\n        name=\"register\"\n        onFinish={onFinish}\n        initialValues={{\n          residence: [\"zhejiang\", \"hangzhou\", \"xihu\"],\n          prefix: \"86\",\n        }}\n        scrollToFirstError\n        size=\"large\"\n      >\n        <div\n          style={{\n            position: \"relative\",\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Label title=\"Đăng nhập hệ thống\" className=\"login_header_text\" />\n          <LangIcon className=\"login_lang_icon\" />\n        </div>\n        <Form.Item\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: \"Tên người dùng không được để trống\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<UserLoginIcon />}\n            placeholder=\"Tên người dùng\"\n            className=\"login_input\"\n          />\n        </Form.Item>\n\n        <Form.Item\n          name=\"password\"\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: \"Mật khẩu không được để trống\",\n            },\n          ]}\n        >\n          <Input.Password\n            type=\"password\"\n            prefix={<LockIcon />}\n            className=\"login_input\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              width: \"100%\",\n              fontSize: \"18px\",\n              padding: 0,\n              borderRadius: \"3px\",\n            }}\n          >\n            Đăng nhập\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","import { useContext } from \"react\";\nimport { UserContext } from \"context\";\nimport { setLocalToken, setUserInfo } from \"common/local_storage\";\nimport { ApiResponse, authApi } from \"common/network\";\nimport APIConstants from \"constants/api_constants\";\nimport { loginFailed } from \"constants/error\";\nimport { message } from \"antd\";\nimport { UserProfile } from \"constants/types\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function useLogin() {\n  const history = useHistory();\n  const { setProfile } = useContext(UserContext);\n  // state\n\n  async function login(username: string, password: string) {\n    const hide = message.loading(\"Action in progress..\", 0);\n    try {\n      let variables = {\n        parameter: {\n          language: \"vi\",\n          loginCode: username,\n          loginPassword: password,\n        },\n        token: \"\",\n      };\n      let result = await authApi(APIConstants.login, variables);\n      hide();\n      let loginRes = result as ApiResponse<UserProfile>;\n      if (!loginRes) {\n        message.error(\"Can't parse response\");\n        return;\n      }\n      // console.log(\"loginRes: \", loginRes);\n      if (loginRes.token) {\n        // save token\n        setLocalToken(loginRes.token);\n        loginRes.data!.token = loginRes.token;\n        setProfile!(loginRes.data);\n        setUserInfo(JSON.stringify(loginRes.data!));\n        // goto home\n        history.push(\"/\");\n        // window.location.replace(\"/\");\n      } else {\n        message.error(\"Token not found\");\n      }\n    } catch (error) {\n      console.log(\"error login: \", error);\n      hide();\n      message.error(loginFailed);\n    }\n  }\n\n  return {\n    login,\n  };\n}\n","import { resetLocalToken, getLocalToken } from \"./local_storage\";\n\nexport type ApiResponse<T> = {\n  success: boolean;\n  code: number;\n  desc?: string;\n  data?: T;\n  token?: string;\n};\n\nlet token = getLocalToken() ?? \"\";\nconst FETCH_TIMEOUT = 15000;\n\nexport default function Request(\n  url: string,\n  params: any,\n  method = \"POST\",\n  needEncodeUrl = true\n) {\n  if (!token) {\n    token = getLocalToken() ?? \"\";\n  }\n  const headers = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: token || \"\",\n    // credentials: 'same-origin',\n  };\n  let opts: RequestInit = {\n    mode: \"cors\",\n    method,\n    headers,\n  };\n  if (!params) {\n    params = {\n      token,\n    };\n  } else if (!params.token) {\n    params.token = token;\n  }\n  if (method.toLowerCase() !== \"get\") {\n    opts.body = typeof params === \"object\" ? JSON.stringify(params) : params;\n  } else if (params) {\n    let keys = Object.keys(params);\n    if (keys.length > 0) {\n      let query = keys.map((key) => {\n        if (needEncodeUrl)\n          return `${encodeURIComponent(key)}=${encodeURIComponent(\n            params[key]\n          )}`;\n        else return `${key}=${params[key]}`;\n      });\n      url += `?${query.join(\"&\")}`;\n    }\n  }\n  let didTimeOut = false;\n\n  return new Promise(function (resolve, reject) {\n    const timeout = setTimeout(function () {\n      didTimeOut = true;\n      return reject(new Error(\"Request timed out\"));\n    }, FETCH_TIMEOUT);\n\n    fetch(url, opts)\n      .then(async (response) => {\n        try {\n          clearTimeout(timeout);\n          if (!didTimeOut) {\n            if (typeof response === \"object\") {\n              if (response.status < 200 || response.status >= 300) {\n                const contentType = response.headers.get(\"content-type\") ?? \"\";\n                const res =\n                  contentType.indexOf(\"json\") >= 0 && (await response.json());\n                if (response.status === 401) {\n                  resetLocalToken();\n                }\n                if (response.status === 503) {\n                  // @ts-ignore\n                  window.location = \"/503\";\n                }\n                if (response.status >= 500) {\n                  return Promise.reject(\n                    \"System Error. Please try again later.\"\n                  );\n                }\n                if (res) {\n                  return Promise.reject(\n                    typeof res === \"object\" ? JSON.stringify(res) : res\n                  );\n                }\n                return Promise.reject(response.statusText);\n              }\n              if (response.status === 204) {\n                return response;\n              }\n              return response.json();\n            } else {\n              return Promise.reject(\"Request failed\");\n            }\n          }\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })\n      .then((data) => {\n        // console.log(data);\n        if (data.code) {\n          if (data.code === 401) {\n            resetLocalToken();\n          }\n          if (data.code < 200 && data.code >= 300) {\n            return reject(data.desc ?? data.message ?? \"Request failed\");\n          }\n        }\n        return resolve(data);\n      })\n      .catch((err) => {\n        if (didTimeOut) return;\n        return reject(err);\n      });\n  });\n}\n\nexport function authApi(url: string, params: any, method = \"POST\") {\n  let didTimeOut = false;\n\n  return new Promise(function (resolve, reject) {\n    const timeout = setTimeout(function () {\n      didTimeOut = true;\n      return reject(new Error(\"Request timed out\"));\n    }, FETCH_TIMEOUT);\n\n    fetch(url, {\n      mode: \"cors\", // 'cors - no-cors'\n      method,\n      body: typeof params === \"object\" ? JSON.stringify(params) : params,\n      headers: new Headers({\n        accept: \"application/json\",\n        \"content-type\": \"application/json\",\n      }),\n    })\n      .then(async (response) => {\n        clearTimeout(timeout);\n        if (didTimeOut) {\n          return;\n        }\n        if (response == null) {\n          return;\n        }\n        if (response.status < 200 || response.status >= 300) {\n          const contentType = response.headers.get(\"content-type\") ?? \"\";\n          if (contentType.indexOf(\"json\") >= 0) {\n            const res = await response.json();\n            throw new Error(\n              typeof res === \"object\" ? JSON.stringify(res) : res\n            );\n          } else {\n            throw new Error(response.statusText);\n          }\n        } else return response.json();\n      })\n      .then((data) => {\n        if (data.code === 401) {\n          resetLocalToken();\n        }\n        // fix token is old token at base api\n        if (data.token) {\n          token = getLocalToken() ?? \"\";\n        }\n        return resolve(data);\n      })\n      .catch((err) => {\n        if (didTimeOut) return;\n        return reject(err);\n      });\n  });\n}\n\n// for call api with attack file\nexport function uploadFormData(\n  url: string,\n  formData: FormData,\n  method = \"POST\",\n  onProgress: Function\n) {\n  if (token) {\n    if (onProgress) {\n      return uploadApiWithProgress(url, formData, undefined, onProgress);\n    } else return uploadNormal(url, formData, method);\n  } else return Promise.reject(\"Not exists token\");\n}\n\nexport function uploadApi(\n  url: string,\n  fileObject: any,\n  fileName: string,\n  method = \"POST\",\n  params: any,\n  onProgress: Function\n) {\n  if (token) {\n    const data = new FormData();\n    if (fileObject instanceof Array) {\n      fileObject.forEach((file) => {\n        data.append(fileName, file);\n      });\n    } else if (fileObject) {\n      data.append(fileName, fileObject);\n    }\n    Object.keys(params).map(function (key) {\n      data.append(key, params[key]);\n    });\n    if (onProgress) {\n      return uploadApiWithProgress(url, data, undefined, onProgress);\n    } else return uploadNormal(url, data, method);\n  } else return Promise.reject(\"Not exists token\");\n}\n// base upload func\nfunction uploadNormal(url: string, data: FormData, method = \"POST\") {\n  if (!token) {\n    token = getLocalToken() ?? \"\";\n  }\n  let didTimeOut = false;\n\n  return new Promise(function (resolve, reject) {\n    const timeout = setTimeout(function () {\n      didTimeOut = true;\n      return reject(new Error(\"Request timed out\"));\n    }, FETCH_TIMEOUT);\n\n    fetch(url, {\n      mode: \"cors\",\n      method,\n      headers: {\n        // 'Accept': 'application/json',\n        // 'content-type': 'application/x-www-form-urlencoded',\n        Authorization: token,\n        // credentials: 'same-origin',\n      },\n      body: data,\n    })\n      .then(async (response) => {\n        clearTimeout(timeout);\n        if (!didTimeOut) {\n          if (response.status < 200 || response.status >= 300) {\n            let contentType = response.headers.get(\"content-type\") ?? \"\";\n            if (contentType.indexOf(\"json\") >= 0) {\n              const res = await response.json();\n              throw new Error(JSON.stringify(res));\n            } else {\n              throw new Error(response.statusText);\n            }\n          } else return response.json();\n        }\n      })\n      .then((data) => {\n        return resolve(data);\n      })\n      .catch((err) => {\n        if (didTimeOut) return;\n        return reject(err);\n      });\n  });\n}\n\nfunction uploadApiWithProgress(\n  url: string,\n  data: FormData,\n  method = \"POST\",\n  onProgress: Function\n) {\n  if (data instanceof FormData) {\n    return new Promise((res, rej) => {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"post\", url);\n      xhr.setRequestHeader(\"x-api-key\", token);\n      xhr.setRequestHeader(\"mode\", \"cors\");\n      xhr.onload = (e) => res(e.target);\n      xhr.onerror = rej;\n      if (xhr.upload && onProgress) {\n        // @ts-ignore\n        xhr.upload.onprogress = onProgress; // event.loaded / event.total * 100 ; //event.lengthComputable\n      }\n      xhr.send(data);\n    });\n  } else return Promise.reject(\"Data not form data\");\n}\n","let host = process.env.REACT_APP_API_URL;\nexport const homePage = process.env.REACT_APP_PAGE_URL;\n\nexport default {\n  host,\n  login: host + \"/login.do\",\n  getOrders: host + \"/getOrders.do\",\n  getStatusCount: host + \"/getStatusCountData.do\",\n  exportOrders: \"/customExportOrders.do\",\n};\n","export const loginFailed = \"Username or password is incorrect!\";"],"sourceRoot":""}